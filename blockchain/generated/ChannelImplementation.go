/*
 * Copyright (C) 2019 The "MysteriumNetwork/node" Authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package generated

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ChannelImplementationABI is the input ABI used to generate the binding from.
const ChannelImplementationABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"identityHash\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDestination\",\"type\":\"address\"}],\"name\":\"setFundsDestination\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"identityBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastSequence\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dex\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimEthers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingWithdrawal\",\"outputs\":[{\"name\":\"party\",\"type\":\"address\"},{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"timeout\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hubId\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hubBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFundsDestination\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_DEXImplementation\",\"type\":\"address\"},{\"name\":\"_DEXOwner\",\"type\":\"address\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"IdentityBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"identityBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"hubBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sequence\",\"type\":\"uint256\"}],\"name\":\"ChannelStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"party\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"party\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"timeout\",\"type\":\"uint256\"}],\"name\":\"ExitRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"challengePeriod\",\"type\":\"uint256\"}],\"name\":\"ChallengePeriodChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousDestination\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newDestination\",\"type\":\"address\"}],\"name\":\"DestinationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_dex\",\"type\":\"address\"},{\"name\":\"_identityHash\",\"type\":\"address\"},{\"name\":\"_hubId\",\"type\":\"address\"},{\"name\":\"_challengePeriod\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_party\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"updateIdentityBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identityBalance\",\"type\":\"uint256\"},{\"name\":\"_hubBalance\",\"type\":\"uint256\"},{\"name\":\"_sequence\",\"type\":\"uint256\"},{\"name\":\"_identitySig\",\"type\":\"bytes\"},{\"name\":\"_hubSig\",\"type\":\"bytes\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identityBalance\",\"type\":\"uint256\"},{\"name\":\"_hubBalance\",\"type\":\"uint256\"},{\"name\":\"_identityWithdraw\",\"type\":\"uint256\"},{\"name\":\"_hubWithdraw\",\"type\":\"uint256\"},{\"name\":\"_sequence\",\"type\":\"uint256\"},{\"name\":\"_deadline\",\"type\":\"uint256\"},{\"name\":\"_identitySig\",\"type\":\"bytes\"},{\"name\":\"_hubSig\",\"type\":\"bytes\"}],\"name\":\"updateAndWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_party\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"exitRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_party\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_signature\",\"type\":\"bytes\"},{\"name\":\"_identityBalance\",\"type\":\"uint256\"},{\"name\":\"_hubBalance\",\"type\":\"uint256\"},{\"name\":\"_sequence\",\"type\":\"uint256\"},{\"name\":\"_identitySig\",\"type\":\"bytes\"},{\"name\":\"_hubSig\",\"type\":\"bytes\"}],\"name\":\"updateAndExit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalizeExit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newChallengePediod\",\"type\":\"uint256\"},{\"name\":\"_identitySig\",\"type\":\"bytes\"},{\"name\":\"_hubSig\",\"type\":\"bytes\"}],\"name\":\"updateChallengePeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDestination\",\"type\":\"address\"},{\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"setFundsDestinationByCheque\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ChannelImplementationBin is the compiled bytecode used for deploying new contracts.
const ChannelImplementationBin = ``

// DeployChannelImplementation deploys a new Ethereum contract, binding an instance of ChannelImplementation to it.
func DeployChannelImplementation(auth *bind.TransactOpts, backend bind.ContractBackend, _token common.Address, _DEXImplementation common.Address, _DEXOwner common.Address, _rate *big.Int) (common.Address, *types.Transaction, *ChannelImplementation, error) {
	parsed, err := abi.JSON(strings.NewReader(ChannelImplementationABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ChannelImplementationBin), backend, _token, _DEXImplementation, _DEXOwner, _rate)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ChannelImplementation{ChannelImplementationCaller: ChannelImplementationCaller{contract: contract}, ChannelImplementationTransactor: ChannelImplementationTransactor{contract: contract}, ChannelImplementationFilterer: ChannelImplementationFilterer{contract: contract}}, nil
}

// ChannelImplementation is an auto generated Go binding around an Ethereum contract.
type ChannelImplementation struct {
	ChannelImplementationCaller     // Read-only binding to the contract
	ChannelImplementationTransactor // Write-only binding to the contract
	ChannelImplementationFilterer   // Log filterer for contract events
}

// ChannelImplementationCaller is an auto generated read-only Go binding around an Ethereum contract.
type ChannelImplementationCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChannelImplementationTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ChannelImplementationTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChannelImplementationFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ChannelImplementationFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ChannelImplementationSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ChannelImplementationSession struct {
	Contract     *ChannelImplementation // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ChannelImplementationCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ChannelImplementationCallerSession struct {
	Contract *ChannelImplementationCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// ChannelImplementationTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ChannelImplementationTransactorSession struct {
	Contract     *ChannelImplementationTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// ChannelImplementationRaw is an auto generated low-level Go binding around an Ethereum contract.
type ChannelImplementationRaw struct {
	Contract *ChannelImplementation // Generic contract binding to access the raw methods on
}

// ChannelImplementationCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ChannelImplementationCallerRaw struct {
	Contract *ChannelImplementationCaller // Generic read-only contract binding to access the raw methods on
}

// ChannelImplementationTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ChannelImplementationTransactorRaw struct {
	Contract *ChannelImplementationTransactor // Generic write-only contract binding to access the raw methods on
}

// NewChannelImplementation creates a new instance of ChannelImplementation, bound to a specific deployed contract.
func NewChannelImplementation(address common.Address, backend bind.ContractBackend) (*ChannelImplementation, error) {
	contract, err := bindChannelImplementation(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ChannelImplementation{ChannelImplementationCaller: ChannelImplementationCaller{contract: contract}, ChannelImplementationTransactor: ChannelImplementationTransactor{contract: contract}, ChannelImplementationFilterer: ChannelImplementationFilterer{contract: contract}}, nil
}

// NewChannelImplementationCaller creates a new read-only instance of ChannelImplementation, bound to a specific deployed contract.
func NewChannelImplementationCaller(address common.Address, caller bind.ContractCaller) (*ChannelImplementationCaller, error) {
	contract, err := bindChannelImplementation(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ChannelImplementationCaller{contract: contract}, nil
}

// NewChannelImplementationTransactor creates a new write-only instance of ChannelImplementation, bound to a specific deployed contract.
func NewChannelImplementationTransactor(address common.Address, transactor bind.ContractTransactor) (*ChannelImplementationTransactor, error) {
	contract, err := bindChannelImplementation(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ChannelImplementationTransactor{contract: contract}, nil
}

// NewChannelImplementationFilterer creates a new log filterer instance of ChannelImplementation, bound to a specific deployed contract.
func NewChannelImplementationFilterer(address common.Address, filterer bind.ContractFilterer) (*ChannelImplementationFilterer, error) {
	contract, err := bindChannelImplementation(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ChannelImplementationFilterer{contract: contract}, nil
}

// bindChannelImplementation binds a generic wrapper to an already deployed contract.
func bindChannelImplementation(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ChannelImplementationABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ChannelImplementation *ChannelImplementationRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ChannelImplementation.Contract.ChannelImplementationCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ChannelImplementation *ChannelImplementationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.ChannelImplementationTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ChannelImplementation *ChannelImplementationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.ChannelImplementationTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ChannelImplementation *ChannelImplementationCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ChannelImplementation.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ChannelImplementation *ChannelImplementationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ChannelImplementation *ChannelImplementationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.contract.Transact(opts, method, params...)
}

// ChallengePeriod is a free data retrieval call binding the contract method 0xf3f480d9.
//
// Solidity: function challengePeriod() constant returns(uint256)
func (_ChannelImplementation *ChannelImplementationCaller) ChallengePeriod(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ChannelImplementation.contract.Call(opts, out, "challengePeriod")
	return *ret0, err
}

// ChallengePeriod is a free data retrieval call binding the contract method 0xf3f480d9.
//
// Solidity: function challengePeriod() constant returns(uint256)
func (_ChannelImplementation *ChannelImplementationSession) ChallengePeriod() (*big.Int, error) {
	return _ChannelImplementation.Contract.ChallengePeriod(&_ChannelImplementation.CallOpts)
}

// ChallengePeriod is a free data retrieval call binding the contract method 0xf3f480d9.
//
// Solidity: function challengePeriod() constant returns(uint256)
func (_ChannelImplementation *ChannelImplementationCallerSession) ChallengePeriod() (*big.Int, error) {
	return _ChannelImplementation.Contract.ChallengePeriod(&_ChannelImplementation.CallOpts)
}

// Dex is a free data retrieval call binding the contract method 0x692058c2.
//
// Solidity: function dex() constant returns(address)
func (_ChannelImplementation *ChannelImplementationCaller) Dex(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ChannelImplementation.contract.Call(opts, out, "dex")
	return *ret0, err
}

// Dex is a free data retrieval call binding the contract method 0x692058c2.
//
// Solidity: function dex() constant returns(address)
func (_ChannelImplementation *ChannelImplementationSession) Dex() (common.Address, error) {
	return _ChannelImplementation.Contract.Dex(&_ChannelImplementation.CallOpts)
}

// Dex is a free data retrieval call binding the contract method 0x692058c2.
//
// Solidity: function dex() constant returns(address)
func (_ChannelImplementation *ChannelImplementationCallerSession) Dex() (common.Address, error) {
	return _ChannelImplementation.Contract.Dex(&_ChannelImplementation.CallOpts)
}

// GetFundsDestination is a free data retrieval call binding the contract method 0xf58c5b6e.
//
// Solidity: function getFundsDestination() constant returns(address)
func (_ChannelImplementation *ChannelImplementationCaller) GetFundsDestination(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ChannelImplementation.contract.Call(opts, out, "getFundsDestination")
	return *ret0, err
}

// GetFundsDestination is a free data retrieval call binding the contract method 0xf58c5b6e.
//
// Solidity: function getFundsDestination() constant returns(address)
func (_ChannelImplementation *ChannelImplementationSession) GetFundsDestination() (common.Address, error) {
	return _ChannelImplementation.Contract.GetFundsDestination(&_ChannelImplementation.CallOpts)
}

// GetFundsDestination is a free data retrieval call binding the contract method 0xf58c5b6e.
//
// Solidity: function getFundsDestination() constant returns(address)
func (_ChannelImplementation *ChannelImplementationCallerSession) GetFundsDestination() (common.Address, error) {
	return _ChannelImplementation.Contract.GetFundsDestination(&_ChannelImplementation.CallOpts)
}

// HubBalance is a free data retrieval call binding the contract method 0xe793997e.
//
// Solidity: function hubBalance() constant returns(uint256)
func (_ChannelImplementation *ChannelImplementationCaller) HubBalance(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ChannelImplementation.contract.Call(opts, out, "hubBalance")
	return *ret0, err
}

// HubBalance is a free data retrieval call binding the contract method 0xe793997e.
//
// Solidity: function hubBalance() constant returns(uint256)
func (_ChannelImplementation *ChannelImplementationSession) HubBalance() (*big.Int, error) {
	return _ChannelImplementation.Contract.HubBalance(&_ChannelImplementation.CallOpts)
}

// HubBalance is a free data retrieval call binding the contract method 0xe793997e.
//
// Solidity: function hubBalance() constant returns(uint256)
func (_ChannelImplementation *ChannelImplementationCallerSession) HubBalance() (*big.Int, error) {
	return _ChannelImplementation.Contract.HubBalance(&_ChannelImplementation.CallOpts)
}

// HubId is a free data retrieval call binding the contract method 0x90b0fe4b.
//
// Solidity: function hubId() constant returns(address)
func (_ChannelImplementation *ChannelImplementationCaller) HubId(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ChannelImplementation.contract.Call(opts, out, "hubId")
	return *ret0, err
}

// HubId is a free data retrieval call binding the contract method 0x90b0fe4b.
//
// Solidity: function hubId() constant returns(address)
func (_ChannelImplementation *ChannelImplementationSession) HubId() (common.Address, error) {
	return _ChannelImplementation.Contract.HubId(&_ChannelImplementation.CallOpts)
}

// HubId is a free data retrieval call binding the contract method 0x90b0fe4b.
//
// Solidity: function hubId() constant returns(address)
func (_ChannelImplementation *ChannelImplementationCallerSession) HubId() (common.Address, error) {
	return _ChannelImplementation.Contract.HubId(&_ChannelImplementation.CallOpts)
}

// IdentityBalance is a free data retrieval call binding the contract method 0x3891dcd3.
//
// Solidity: function identityBalance() constant returns(uint256)
func (_ChannelImplementation *ChannelImplementationCaller) IdentityBalance(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ChannelImplementation.contract.Call(opts, out, "identityBalance")
	return *ret0, err
}

// IdentityBalance is a free data retrieval call binding the contract method 0x3891dcd3.
//
// Solidity: function identityBalance() constant returns(uint256)
func (_ChannelImplementation *ChannelImplementationSession) IdentityBalance() (*big.Int, error) {
	return _ChannelImplementation.Contract.IdentityBalance(&_ChannelImplementation.CallOpts)
}

// IdentityBalance is a free data retrieval call binding the contract method 0x3891dcd3.
//
// Solidity: function identityBalance() constant returns(uint256)
func (_ChannelImplementation *ChannelImplementationCallerSession) IdentityBalance() (*big.Int, error) {
	return _ChannelImplementation.Contract.IdentityBalance(&_ChannelImplementation.CallOpts)
}

// IdentityHash is a free data retrieval call binding the contract method 0x212ff20a.
//
// Solidity: function identityHash() constant returns(address)
func (_ChannelImplementation *ChannelImplementationCaller) IdentityHash(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ChannelImplementation.contract.Call(opts, out, "identityHash")
	return *ret0, err
}

// IdentityHash is a free data retrieval call binding the contract method 0x212ff20a.
//
// Solidity: function identityHash() constant returns(address)
func (_ChannelImplementation *ChannelImplementationSession) IdentityHash() (common.Address, error) {
	return _ChannelImplementation.Contract.IdentityHash(&_ChannelImplementation.CallOpts)
}

// IdentityHash is a free data retrieval call binding the contract method 0x212ff20a.
//
// Solidity: function identityHash() constant returns(address)
func (_ChannelImplementation *ChannelImplementationCallerSession) IdentityHash() (common.Address, error) {
	return _ChannelImplementation.Contract.IdentityHash(&_ChannelImplementation.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() constant returns(bool)
func (_ChannelImplementation *ChannelImplementationCaller) IsInitialized(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ChannelImplementation.contract.Call(opts, out, "isInitialized")
	return *ret0, err
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() constant returns(bool)
func (_ChannelImplementation *ChannelImplementationSession) IsInitialized() (bool, error) {
	return _ChannelImplementation.Contract.IsInitialized(&_ChannelImplementation.CallOpts)
}

// IsInitialized is a free data retrieval call binding the contract method 0x392e53cd.
//
// Solidity: function isInitialized() constant returns(bool)
func (_ChannelImplementation *ChannelImplementationCallerSession) IsInitialized() (bool, error) {
	return _ChannelImplementation.Contract.IsInitialized(&_ChannelImplementation.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_ChannelImplementation *ChannelImplementationCaller) IsOwner(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ChannelImplementation.contract.Call(opts, out, "isOwner")
	return *ret0, err
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_ChannelImplementation *ChannelImplementationSession) IsOwner() (bool, error) {
	return _ChannelImplementation.Contract.IsOwner(&_ChannelImplementation.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_ChannelImplementation *ChannelImplementationCallerSession) IsOwner() (bool, error) {
	return _ChannelImplementation.Contract.IsOwner(&_ChannelImplementation.CallOpts)
}

// LastSequence is a free data retrieval call binding the contract method 0x3bc684e9.
//
// Solidity: function lastSequence() constant returns(uint256)
func (_ChannelImplementation *ChannelImplementationCaller) LastSequence(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ChannelImplementation.contract.Call(opts, out, "lastSequence")
	return *ret0, err
}

// LastSequence is a free data retrieval call binding the contract method 0x3bc684e9.
//
// Solidity: function lastSequence() constant returns(uint256)
func (_ChannelImplementation *ChannelImplementationSession) LastSequence() (*big.Int, error) {
	return _ChannelImplementation.Contract.LastSequence(&_ChannelImplementation.CallOpts)
}

// LastSequence is a free data retrieval call binding the contract method 0x3bc684e9.
//
// Solidity: function lastSequence() constant returns(uint256)
func (_ChannelImplementation *ChannelImplementationCallerSession) LastSequence() (*big.Int, error) {
	return _ChannelImplementation.Contract.LastSequence(&_ChannelImplementation.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_ChannelImplementation *ChannelImplementationCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ChannelImplementation.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_ChannelImplementation *ChannelImplementationSession) Owner() (common.Address, error) {
	return _ChannelImplementation.Contract.Owner(&_ChannelImplementation.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_ChannelImplementation *ChannelImplementationCallerSession) Owner() (common.Address, error) {
	return _ChannelImplementation.Contract.Owner(&_ChannelImplementation.CallOpts)
}

// PendingWithdrawal is a free data retrieval call binding the contract method 0x7e288822.
//
// Solidity: function pendingWithdrawal() constant returns(address party, address beneficiary, uint256 timeout)
func (_ChannelImplementation *ChannelImplementationCaller) PendingWithdrawal(opts *bind.CallOpts) (struct {
	Party       common.Address
	Beneficiary common.Address
	Timeout     *big.Int
}, error) {
	ret := new(struct {
		Party       common.Address
		Beneficiary common.Address
		Timeout     *big.Int
	})
	out := ret
	err := _ChannelImplementation.contract.Call(opts, out, "pendingWithdrawal")
	return *ret, err
}

// PendingWithdrawal is a free data retrieval call binding the contract method 0x7e288822.
//
// Solidity: function pendingWithdrawal() constant returns(address party, address beneficiary, uint256 timeout)
func (_ChannelImplementation *ChannelImplementationSession) PendingWithdrawal() (struct {
	Party       common.Address
	Beneficiary common.Address
	Timeout     *big.Int
}, error) {
	return _ChannelImplementation.Contract.PendingWithdrawal(&_ChannelImplementation.CallOpts)
}

// PendingWithdrawal is a free data retrieval call binding the contract method 0x7e288822.
//
// Solidity: function pendingWithdrawal() constant returns(address party, address beneficiary, uint256 timeout)
func (_ChannelImplementation *ChannelImplementationCallerSession) PendingWithdrawal() (struct {
	Party       common.Address
	Beneficiary common.Address
	Timeout     *big.Int
}, error) {
	return _ChannelImplementation.Contract.PendingWithdrawal(&_ChannelImplementation.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() constant returns(address)
func (_ChannelImplementation *ChannelImplementationCaller) Token(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ChannelImplementation.contract.Call(opts, out, "token")
	return *ret0, err
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() constant returns(address)
func (_ChannelImplementation *ChannelImplementationSession) Token() (common.Address, error) {
	return _ChannelImplementation.Contract.Token(&_ChannelImplementation.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() constant returns(address)
func (_ChannelImplementation *ChannelImplementationCallerSession) Token() (common.Address, error) {
	return _ChannelImplementation.Contract.Token(&_ChannelImplementation.CallOpts)
}

// ClaimEthers is a paid mutator transaction binding the contract method 0x6931b550.
//
// Solidity: function claimEthers() returns()
func (_ChannelImplementation *ChannelImplementationTransactor) ClaimEthers(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ChannelImplementation.contract.Transact(opts, "claimEthers")
}

// ClaimEthers is a paid mutator transaction binding the contract method 0x6931b550.
//
// Solidity: function claimEthers() returns()
func (_ChannelImplementation *ChannelImplementationSession) ClaimEthers() (*types.Transaction, error) {
	return _ChannelImplementation.Contract.ClaimEthers(&_ChannelImplementation.TransactOpts)
}

// ClaimEthers is a paid mutator transaction binding the contract method 0x6931b550.
//
// Solidity: function claimEthers() returns()
func (_ChannelImplementation *ChannelImplementationTransactorSession) ClaimEthers() (*types.Transaction, error) {
	return _ChannelImplementation.Contract.ClaimEthers(&_ChannelImplementation.TransactOpts)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xdf8de3e7.
//
// Solidity: function claimTokens(address token) returns()
func (_ChannelImplementation *ChannelImplementationTransactor) ClaimTokens(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error) {
	return _ChannelImplementation.contract.Transact(opts, "claimTokens", token)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xdf8de3e7.
//
// Solidity: function claimTokens(address token) returns()
func (_ChannelImplementation *ChannelImplementationSession) ClaimTokens(token common.Address) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.ClaimTokens(&_ChannelImplementation.TransactOpts, token)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xdf8de3e7.
//
// Solidity: function claimTokens(address token) returns()
func (_ChannelImplementation *ChannelImplementationTransactorSession) ClaimTokens(token common.Address) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.ClaimTokens(&_ChannelImplementation.TransactOpts, token)
}

// Deposit is a paid mutator transaction binding the contract method 0x47e7ef24.
//
// Solidity: function deposit(address _party, uint256 _amount) returns()
func (_ChannelImplementation *ChannelImplementationTransactor) Deposit(opts *bind.TransactOpts, _party common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _ChannelImplementation.contract.Transact(opts, "deposit", _party, _amount)
}

// Deposit is a paid mutator transaction binding the contract method 0x47e7ef24.
//
// Solidity: function deposit(address _party, uint256 _amount) returns()
func (_ChannelImplementation *ChannelImplementationSession) Deposit(_party common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.Deposit(&_ChannelImplementation.TransactOpts, _party, _amount)
}

// Deposit is a paid mutator transaction binding the contract method 0x47e7ef24.
//
// Solidity: function deposit(address _party, uint256 _amount) returns()
func (_ChannelImplementation *ChannelImplementationTransactorSession) Deposit(_party common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.Deposit(&_ChannelImplementation.TransactOpts, _party, _amount)
}

// ExitRequest is a paid mutator transaction binding the contract method 0x87bb489f.
//
// Solidity: function exitRequest(address _party, address _beneficiary, bytes _signature) returns()
func (_ChannelImplementation *ChannelImplementationTransactor) ExitRequest(opts *bind.TransactOpts, _party common.Address, _beneficiary common.Address, _signature []byte) (*types.Transaction, error) {
	return _ChannelImplementation.contract.Transact(opts, "exitRequest", _party, _beneficiary, _signature)
}

// ExitRequest is a paid mutator transaction binding the contract method 0x87bb489f.
//
// Solidity: function exitRequest(address _party, address _beneficiary, bytes _signature) returns()
func (_ChannelImplementation *ChannelImplementationSession) ExitRequest(_party common.Address, _beneficiary common.Address, _signature []byte) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.ExitRequest(&_ChannelImplementation.TransactOpts, _party, _beneficiary, _signature)
}

// ExitRequest is a paid mutator transaction binding the contract method 0x87bb489f.
//
// Solidity: function exitRequest(address _party, address _beneficiary, bytes _signature) returns()
func (_ChannelImplementation *ChannelImplementationTransactorSession) ExitRequest(_party common.Address, _beneficiary common.Address, _signature []byte) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.ExitRequest(&_ChannelImplementation.TransactOpts, _party, _beneficiary, _signature)
}

// FinalizeExit is a paid mutator transaction binding the contract method 0x07e8ec1f.
//
// Solidity: function finalizeExit() returns()
func (_ChannelImplementation *ChannelImplementationTransactor) FinalizeExit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ChannelImplementation.contract.Transact(opts, "finalizeExit")
}

// FinalizeExit is a paid mutator transaction binding the contract method 0x07e8ec1f.
//
// Solidity: function finalizeExit() returns()
func (_ChannelImplementation *ChannelImplementationSession) FinalizeExit() (*types.Transaction, error) {
	return _ChannelImplementation.Contract.FinalizeExit(&_ChannelImplementation.TransactOpts)
}

// FinalizeExit is a paid mutator transaction binding the contract method 0x07e8ec1f.
//
// Solidity: function finalizeExit() returns()
func (_ChannelImplementation *ChannelImplementationTransactorSession) FinalizeExit() (*types.Transaction, error) {
	return _ChannelImplementation.Contract.FinalizeExit(&_ChannelImplementation.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xf7013ef6.
//
// Solidity: function initialize(address _token, address _dex, address _identityHash, address _hubId, uint256 _challengePeriod) returns()
func (_ChannelImplementation *ChannelImplementationTransactor) Initialize(opts *bind.TransactOpts, _token common.Address, _dex common.Address, _identityHash common.Address, _hubId common.Address, _challengePeriod *big.Int) (*types.Transaction, error) {
	return _ChannelImplementation.contract.Transact(opts, "initialize", _token, _dex, _identityHash, _hubId, _challengePeriod)
}

// Initialize is a paid mutator transaction binding the contract method 0xf7013ef6.
//
// Solidity: function initialize(address _token, address _dex, address _identityHash, address _hubId, uint256 _challengePeriod) returns()
func (_ChannelImplementation *ChannelImplementationSession) Initialize(_token common.Address, _dex common.Address, _identityHash common.Address, _hubId common.Address, _challengePeriod *big.Int) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.Initialize(&_ChannelImplementation.TransactOpts, _token, _dex, _identityHash, _hubId, _challengePeriod)
}

// Initialize is a paid mutator transaction binding the contract method 0xf7013ef6.
//
// Solidity: function initialize(address _token, address _dex, address _identityHash, address _hubId, uint256 _challengePeriod) returns()
func (_ChannelImplementation *ChannelImplementationTransactorSession) Initialize(_token common.Address, _dex common.Address, _identityHash common.Address, _hubId common.Address, _challengePeriod *big.Int) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.Initialize(&_ChannelImplementation.TransactOpts, _token, _dex, _identityHash, _hubId, _challengePeriod)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ChannelImplementation *ChannelImplementationTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ChannelImplementation.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ChannelImplementation *ChannelImplementationSession) RenounceOwnership() (*types.Transaction, error) {
	return _ChannelImplementation.Contract.RenounceOwnership(&_ChannelImplementation.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ChannelImplementation *ChannelImplementationTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ChannelImplementation.Contract.RenounceOwnership(&_ChannelImplementation.TransactOpts)
}

// SetFundsDestination is a paid mutator transaction binding the contract method 0x238e130a.
//
// Solidity: function setFundsDestination(address _newDestination) returns()
func (_ChannelImplementation *ChannelImplementationTransactor) SetFundsDestination(opts *bind.TransactOpts, _newDestination common.Address) (*types.Transaction, error) {
	return _ChannelImplementation.contract.Transact(opts, "setFundsDestination", _newDestination)
}

// SetFundsDestination is a paid mutator transaction binding the contract method 0x238e130a.
//
// Solidity: function setFundsDestination(address _newDestination) returns()
func (_ChannelImplementation *ChannelImplementationSession) SetFundsDestination(_newDestination common.Address) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.SetFundsDestination(&_ChannelImplementation.TransactOpts, _newDestination)
}

// SetFundsDestination is a paid mutator transaction binding the contract method 0x238e130a.
//
// Solidity: function setFundsDestination(address _newDestination) returns()
func (_ChannelImplementation *ChannelImplementationTransactorSession) SetFundsDestination(_newDestination common.Address) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.SetFundsDestination(&_ChannelImplementation.TransactOpts, _newDestination)
}

// SetFundsDestinationByCheque is a paid mutator transaction binding the contract method 0x6a2b76ad.
//
// Solidity: function setFundsDestinationByCheque(address _newDestination, bytes _signature) returns()
func (_ChannelImplementation *ChannelImplementationTransactor) SetFundsDestinationByCheque(opts *bind.TransactOpts, _newDestination common.Address, _signature []byte) (*types.Transaction, error) {
	return _ChannelImplementation.contract.Transact(opts, "setFundsDestinationByCheque", _newDestination, _signature)
}

// SetFundsDestinationByCheque is a paid mutator transaction binding the contract method 0x6a2b76ad.
//
// Solidity: function setFundsDestinationByCheque(address _newDestination, bytes _signature) returns()
func (_ChannelImplementation *ChannelImplementationSession) SetFundsDestinationByCheque(_newDestination common.Address, _signature []byte) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.SetFundsDestinationByCheque(&_ChannelImplementation.TransactOpts, _newDestination, _signature)
}

// SetFundsDestinationByCheque is a paid mutator transaction binding the contract method 0x6a2b76ad.
//
// Solidity: function setFundsDestinationByCheque(address _newDestination, bytes _signature) returns()
func (_ChannelImplementation *ChannelImplementationTransactorSession) SetFundsDestinationByCheque(_newDestination common.Address, _signature []byte) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.SetFundsDestinationByCheque(&_ChannelImplementation.TransactOpts, _newDestination, _signature)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ChannelImplementation *ChannelImplementationTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ChannelImplementation.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ChannelImplementation *ChannelImplementationSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.TransferOwnership(&_ChannelImplementation.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ChannelImplementation *ChannelImplementationTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.TransferOwnership(&_ChannelImplementation.TransactOpts, newOwner)
}

// Update is a paid mutator transaction binding the contract method 0x3763263d.
//
// Solidity: function update(uint256 _identityBalance, uint256 _hubBalance, uint256 _sequence, bytes _identitySig, bytes _hubSig) returns()
func (_ChannelImplementation *ChannelImplementationTransactor) Update(opts *bind.TransactOpts, _identityBalance *big.Int, _hubBalance *big.Int, _sequence *big.Int, _identitySig []byte, _hubSig []byte) (*types.Transaction, error) {
	return _ChannelImplementation.contract.Transact(opts, "update", _identityBalance, _hubBalance, _sequence, _identitySig, _hubSig)
}

// Update is a paid mutator transaction binding the contract method 0x3763263d.
//
// Solidity: function update(uint256 _identityBalance, uint256 _hubBalance, uint256 _sequence, bytes _identitySig, bytes _hubSig) returns()
func (_ChannelImplementation *ChannelImplementationSession) Update(_identityBalance *big.Int, _hubBalance *big.Int, _sequence *big.Int, _identitySig []byte, _hubSig []byte) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.Update(&_ChannelImplementation.TransactOpts, _identityBalance, _hubBalance, _sequence, _identitySig, _hubSig)
}

// Update is a paid mutator transaction binding the contract method 0x3763263d.
//
// Solidity: function update(uint256 _identityBalance, uint256 _hubBalance, uint256 _sequence, bytes _identitySig, bytes _hubSig) returns()
func (_ChannelImplementation *ChannelImplementationTransactorSession) Update(_identityBalance *big.Int, _hubBalance *big.Int, _sequence *big.Int, _identitySig []byte, _hubSig []byte) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.Update(&_ChannelImplementation.TransactOpts, _identityBalance, _hubBalance, _sequence, _identitySig, _hubSig)
}

// UpdateAndExit is a paid mutator transaction binding the contract method 0x2bd3b761.
//
// Solidity: function updateAndExit(address _party, address _beneficiary, bytes _signature, uint256 _identityBalance, uint256 _hubBalance, uint256 _sequence, bytes _identitySig, bytes _hubSig) returns()
func (_ChannelImplementation *ChannelImplementationTransactor) UpdateAndExit(opts *bind.TransactOpts, _party common.Address, _beneficiary common.Address, _signature []byte, _identityBalance *big.Int, _hubBalance *big.Int, _sequence *big.Int, _identitySig []byte, _hubSig []byte) (*types.Transaction, error) {
	return _ChannelImplementation.contract.Transact(opts, "updateAndExit", _party, _beneficiary, _signature, _identityBalance, _hubBalance, _sequence, _identitySig, _hubSig)
}

// UpdateAndExit is a paid mutator transaction binding the contract method 0x2bd3b761.
//
// Solidity: function updateAndExit(address _party, address _beneficiary, bytes _signature, uint256 _identityBalance, uint256 _hubBalance, uint256 _sequence, bytes _identitySig, bytes _hubSig) returns()
func (_ChannelImplementation *ChannelImplementationSession) UpdateAndExit(_party common.Address, _beneficiary common.Address, _signature []byte, _identityBalance *big.Int, _hubBalance *big.Int, _sequence *big.Int, _identitySig []byte, _hubSig []byte) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.UpdateAndExit(&_ChannelImplementation.TransactOpts, _party, _beneficiary, _signature, _identityBalance, _hubBalance, _sequence, _identitySig, _hubSig)
}

// UpdateAndExit is a paid mutator transaction binding the contract method 0x2bd3b761.
//
// Solidity: function updateAndExit(address _party, address _beneficiary, bytes _signature, uint256 _identityBalance, uint256 _hubBalance, uint256 _sequence, bytes _identitySig, bytes _hubSig) returns()
func (_ChannelImplementation *ChannelImplementationTransactorSession) UpdateAndExit(_party common.Address, _beneficiary common.Address, _signature []byte, _identityBalance *big.Int, _hubBalance *big.Int, _sequence *big.Int, _identitySig []byte, _hubSig []byte) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.UpdateAndExit(&_ChannelImplementation.TransactOpts, _party, _beneficiary, _signature, _identityBalance, _hubBalance, _sequence, _identitySig, _hubSig)
}

// UpdateAndWithdraw is a paid mutator transaction binding the contract method 0xe67a6492.
//
// Solidity: function updateAndWithdraw(uint256 _identityBalance, uint256 _hubBalance, uint256 _identityWithdraw, uint256 _hubWithdraw, uint256 _sequence, uint256 _deadline, bytes _identitySig, bytes _hubSig) returns()
func (_ChannelImplementation *ChannelImplementationTransactor) UpdateAndWithdraw(opts *bind.TransactOpts, _identityBalance *big.Int, _hubBalance *big.Int, _identityWithdraw *big.Int, _hubWithdraw *big.Int, _sequence *big.Int, _deadline *big.Int, _identitySig []byte, _hubSig []byte) (*types.Transaction, error) {
	return _ChannelImplementation.contract.Transact(opts, "updateAndWithdraw", _identityBalance, _hubBalance, _identityWithdraw, _hubWithdraw, _sequence, _deadline, _identitySig, _hubSig)
}

// UpdateAndWithdraw is a paid mutator transaction binding the contract method 0xe67a6492.
//
// Solidity: function updateAndWithdraw(uint256 _identityBalance, uint256 _hubBalance, uint256 _identityWithdraw, uint256 _hubWithdraw, uint256 _sequence, uint256 _deadline, bytes _identitySig, bytes _hubSig) returns()
func (_ChannelImplementation *ChannelImplementationSession) UpdateAndWithdraw(_identityBalance *big.Int, _hubBalance *big.Int, _identityWithdraw *big.Int, _hubWithdraw *big.Int, _sequence *big.Int, _deadline *big.Int, _identitySig []byte, _hubSig []byte) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.UpdateAndWithdraw(&_ChannelImplementation.TransactOpts, _identityBalance, _hubBalance, _identityWithdraw, _hubWithdraw, _sequence, _deadline, _identitySig, _hubSig)
}

// UpdateAndWithdraw is a paid mutator transaction binding the contract method 0xe67a6492.
//
// Solidity: function updateAndWithdraw(uint256 _identityBalance, uint256 _hubBalance, uint256 _identityWithdraw, uint256 _hubWithdraw, uint256 _sequence, uint256 _deadline, bytes _identitySig, bytes _hubSig) returns()
func (_ChannelImplementation *ChannelImplementationTransactorSession) UpdateAndWithdraw(_identityBalance *big.Int, _hubBalance *big.Int, _identityWithdraw *big.Int, _hubWithdraw *big.Int, _sequence *big.Int, _deadline *big.Int, _identitySig []byte, _hubSig []byte) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.UpdateAndWithdraw(&_ChannelImplementation.TransactOpts, _identityBalance, _hubBalance, _identityWithdraw, _hubWithdraw, _sequence, _deadline, _identitySig, _hubSig)
}

// UpdateChallengePeriod is a paid mutator transaction binding the contract method 0x2f419894.
//
// Solidity: function updateChallengePeriod(uint256 _newChallengePediod, bytes _identitySig, bytes _hubSig) returns()
func (_ChannelImplementation *ChannelImplementationTransactor) UpdateChallengePeriod(opts *bind.TransactOpts, _newChallengePediod *big.Int, _identitySig []byte, _hubSig []byte) (*types.Transaction, error) {
	return _ChannelImplementation.contract.Transact(opts, "updateChallengePeriod", _newChallengePediod, _identitySig, _hubSig)
}

// UpdateChallengePeriod is a paid mutator transaction binding the contract method 0x2f419894.
//
// Solidity: function updateChallengePeriod(uint256 _newChallengePediod, bytes _identitySig, bytes _hubSig) returns()
func (_ChannelImplementation *ChannelImplementationSession) UpdateChallengePeriod(_newChallengePediod *big.Int, _identitySig []byte, _hubSig []byte) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.UpdateChallengePeriod(&_ChannelImplementation.TransactOpts, _newChallengePediod, _identitySig, _hubSig)
}

// UpdateChallengePeriod is a paid mutator transaction binding the contract method 0x2f419894.
//
// Solidity: function updateChallengePeriod(uint256 _newChallengePediod, bytes _identitySig, bytes _hubSig) returns()
func (_ChannelImplementation *ChannelImplementationTransactorSession) UpdateChallengePeriod(_newChallengePediod *big.Int, _identitySig []byte, _hubSig []byte) (*types.Transaction, error) {
	return _ChannelImplementation.Contract.UpdateChallengePeriod(&_ChannelImplementation.TransactOpts, _newChallengePediod, _identitySig, _hubSig)
}

// UpdateIdentityBalance is a paid mutator transaction binding the contract method 0xa7f4a372.
//
// Solidity: function updateIdentityBalance() returns()
func (_ChannelImplementation *ChannelImplementationTransactor) UpdateIdentityBalance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ChannelImplementation.contract.Transact(opts, "updateIdentityBalance")
}

// UpdateIdentityBalance is a paid mutator transaction binding the contract method 0xa7f4a372.
//
// Solidity: function updateIdentityBalance() returns()
func (_ChannelImplementation *ChannelImplementationSession) UpdateIdentityBalance() (*types.Transaction, error) {
	return _ChannelImplementation.Contract.UpdateIdentityBalance(&_ChannelImplementation.TransactOpts)
}

// UpdateIdentityBalance is a paid mutator transaction binding the contract method 0xa7f4a372.
//
// Solidity: function updateIdentityBalance() returns()
func (_ChannelImplementation *ChannelImplementationTransactorSession) UpdateIdentityBalance() (*types.Transaction, error) {
	return _ChannelImplementation.Contract.UpdateIdentityBalance(&_ChannelImplementation.TransactOpts)
}

// ChannelImplementationChallengePeriodChangedIterator is returned from FilterChallengePeriodChanged and is used to iterate over the raw logs and unpacked data for ChallengePeriodChanged events raised by the ChannelImplementation contract.
type ChannelImplementationChallengePeriodChangedIterator struct {
	Event *ChannelImplementationChallengePeriodChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChannelImplementationChallengePeriodChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChannelImplementationChallengePeriodChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChannelImplementationChallengePeriodChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChannelImplementationChallengePeriodChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChannelImplementationChallengePeriodChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChannelImplementationChallengePeriodChanged represents a ChallengePeriodChanged event raised by the ChannelImplementation contract.
type ChannelImplementationChallengePeriodChanged struct {
	ChallengePeriod *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterChallengePeriodChanged is a free log retrieval operation binding the contract event 0xd88dc0198495dd393fb340468b76e68585dfc90e60c403c3ce77174774a20c6b.
//
// Solidity: event ChallengePeriodChanged(uint256 challengePeriod)
func (_ChannelImplementation *ChannelImplementationFilterer) FilterChallengePeriodChanged(opts *bind.FilterOpts) (*ChannelImplementationChallengePeriodChangedIterator, error) {

	logs, sub, err := _ChannelImplementation.contract.FilterLogs(opts, "ChallengePeriodChanged")
	if err != nil {
		return nil, err
	}
	return &ChannelImplementationChallengePeriodChangedIterator{contract: _ChannelImplementation.contract, event: "ChallengePeriodChanged", logs: logs, sub: sub}, nil
}

// WatchChallengePeriodChanged is a free log subscription operation binding the contract event 0xd88dc0198495dd393fb340468b76e68585dfc90e60c403c3ce77174774a20c6b.
//
// Solidity: event ChallengePeriodChanged(uint256 challengePeriod)
func (_ChannelImplementation *ChannelImplementationFilterer) WatchChallengePeriodChanged(opts *bind.WatchOpts, sink chan<- *ChannelImplementationChallengePeriodChanged) (event.Subscription, error) {

	logs, sub, err := _ChannelImplementation.contract.WatchLogs(opts, "ChallengePeriodChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChannelImplementationChallengePeriodChanged)
				if err := _ChannelImplementation.contract.UnpackLog(event, "ChallengePeriodChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ChannelImplementationChannelStateUpdatedIterator is returned from FilterChannelStateUpdated and is used to iterate over the raw logs and unpacked data for ChannelStateUpdated events raised by the ChannelImplementation contract.
type ChannelImplementationChannelStateUpdatedIterator struct {
	Event *ChannelImplementationChannelStateUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChannelImplementationChannelStateUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChannelImplementationChannelStateUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChannelImplementationChannelStateUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChannelImplementationChannelStateUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChannelImplementationChannelStateUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChannelImplementationChannelStateUpdated represents a ChannelStateUpdated event raised by the ChannelImplementation contract.
type ChannelImplementationChannelStateUpdated struct {
	IdentityBalance *big.Int
	HubBalance      *big.Int
	Sequence        *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterChannelStateUpdated is a free log retrieval operation binding the contract event 0xb318fa2c6ad5473346bab561a5606b47c179654ede99d3a6a0aff10ddd3cf62c.
//
// Solidity: event ChannelStateUpdated(uint256 identityBalance, uint256 hubBalance, uint256 sequence)
func (_ChannelImplementation *ChannelImplementationFilterer) FilterChannelStateUpdated(opts *bind.FilterOpts) (*ChannelImplementationChannelStateUpdatedIterator, error) {

	logs, sub, err := _ChannelImplementation.contract.FilterLogs(opts, "ChannelStateUpdated")
	if err != nil {
		return nil, err
	}
	return &ChannelImplementationChannelStateUpdatedIterator{contract: _ChannelImplementation.contract, event: "ChannelStateUpdated", logs: logs, sub: sub}, nil
}

// WatchChannelStateUpdated is a free log subscription operation binding the contract event 0xb318fa2c6ad5473346bab561a5606b47c179654ede99d3a6a0aff10ddd3cf62c.
//
// Solidity: event ChannelStateUpdated(uint256 identityBalance, uint256 hubBalance, uint256 sequence)
func (_ChannelImplementation *ChannelImplementationFilterer) WatchChannelStateUpdated(opts *bind.WatchOpts, sink chan<- *ChannelImplementationChannelStateUpdated) (event.Subscription, error) {

	logs, sub, err := _ChannelImplementation.contract.WatchLogs(opts, "ChannelStateUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChannelImplementationChannelStateUpdated)
				if err := _ChannelImplementation.contract.UnpackLog(event, "ChannelStateUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ChannelImplementationDestinationChangedIterator is returned from FilterDestinationChanged and is used to iterate over the raw logs and unpacked data for DestinationChanged events raised by the ChannelImplementation contract.
type ChannelImplementationDestinationChangedIterator struct {
	Event *ChannelImplementationDestinationChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChannelImplementationDestinationChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChannelImplementationDestinationChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChannelImplementationDestinationChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChannelImplementationDestinationChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChannelImplementationDestinationChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChannelImplementationDestinationChanged represents a DestinationChanged event raised by the ChannelImplementation contract.
type ChannelImplementationDestinationChanged struct {
	PreviousDestination common.Address
	NewDestination      common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterDestinationChanged is a free log retrieval operation binding the contract event 0xe1a66d77649cf0a57b9937073549f30f1c82bb865aaf066d2f299e37a62c6aad.
//
// Solidity: event DestinationChanged(address indexed previousDestination, address indexed newDestination)
func (_ChannelImplementation *ChannelImplementationFilterer) FilterDestinationChanged(opts *bind.FilterOpts, previousDestination []common.Address, newDestination []common.Address) (*ChannelImplementationDestinationChangedIterator, error) {

	var previousDestinationRule []interface{}
	for _, previousDestinationItem := range previousDestination {
		previousDestinationRule = append(previousDestinationRule, previousDestinationItem)
	}
	var newDestinationRule []interface{}
	for _, newDestinationItem := range newDestination {
		newDestinationRule = append(newDestinationRule, newDestinationItem)
	}

	logs, sub, err := _ChannelImplementation.contract.FilterLogs(opts, "DestinationChanged", previousDestinationRule, newDestinationRule)
	if err != nil {
		return nil, err
	}
	return &ChannelImplementationDestinationChangedIterator{contract: _ChannelImplementation.contract, event: "DestinationChanged", logs: logs, sub: sub}, nil
}

// WatchDestinationChanged is a free log subscription operation binding the contract event 0xe1a66d77649cf0a57b9937073549f30f1c82bb865aaf066d2f299e37a62c6aad.
//
// Solidity: event DestinationChanged(address indexed previousDestination, address indexed newDestination)
func (_ChannelImplementation *ChannelImplementationFilterer) WatchDestinationChanged(opts *bind.WatchOpts, sink chan<- *ChannelImplementationDestinationChanged, previousDestination []common.Address, newDestination []common.Address) (event.Subscription, error) {

	var previousDestinationRule []interface{}
	for _, previousDestinationItem := range previousDestination {
		previousDestinationRule = append(previousDestinationRule, previousDestinationItem)
	}
	var newDestinationRule []interface{}
	for _, newDestinationItem := range newDestination {
		newDestinationRule = append(newDestinationRule, newDestinationItem)
	}

	logs, sub, err := _ChannelImplementation.contract.WatchLogs(opts, "DestinationChanged", previousDestinationRule, newDestinationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChannelImplementationDestinationChanged)
				if err := _ChannelImplementation.contract.UnpackLog(event, "DestinationChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ChannelImplementationExitRequestedIterator is returned from FilterExitRequested and is used to iterate over the raw logs and unpacked data for ExitRequested events raised by the ChannelImplementation contract.
type ChannelImplementationExitRequestedIterator struct {
	Event *ChannelImplementationExitRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChannelImplementationExitRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChannelImplementationExitRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChannelImplementationExitRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChannelImplementationExitRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChannelImplementationExitRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChannelImplementationExitRequested represents a ExitRequested event raised by the ChannelImplementation contract.
type ChannelImplementationExitRequested struct {
	Party   common.Address
	Timeout *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterExitRequested is a free log retrieval operation binding the contract event 0xd9217a461a0f7f84171a8866118c3d92e943ba7c1ba89b819371f729b5cabcbc.
//
// Solidity: event ExitRequested(address party, uint256 timeout)
func (_ChannelImplementation *ChannelImplementationFilterer) FilterExitRequested(opts *bind.FilterOpts) (*ChannelImplementationExitRequestedIterator, error) {

	logs, sub, err := _ChannelImplementation.contract.FilterLogs(opts, "ExitRequested")
	if err != nil {
		return nil, err
	}
	return &ChannelImplementationExitRequestedIterator{contract: _ChannelImplementation.contract, event: "ExitRequested", logs: logs, sub: sub}, nil
}

// WatchExitRequested is a free log subscription operation binding the contract event 0xd9217a461a0f7f84171a8866118c3d92e943ba7c1ba89b819371f729b5cabcbc.
//
// Solidity: event ExitRequested(address party, uint256 timeout)
func (_ChannelImplementation *ChannelImplementationFilterer) WatchExitRequested(opts *bind.WatchOpts, sink chan<- *ChannelImplementationExitRequested) (event.Subscription, error) {

	logs, sub, err := _ChannelImplementation.contract.WatchLogs(opts, "ExitRequested")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChannelImplementationExitRequested)
				if err := _ChannelImplementation.contract.UnpackLog(event, "ExitRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ChannelImplementationFundsWithdrawnIterator is returned from FilterFundsWithdrawn and is used to iterate over the raw logs and unpacked data for FundsWithdrawn events raised by the ChannelImplementation contract.
type ChannelImplementationFundsWithdrawnIterator struct {
	Event *ChannelImplementationFundsWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChannelImplementationFundsWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChannelImplementationFundsWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChannelImplementationFundsWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChannelImplementationFundsWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChannelImplementationFundsWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChannelImplementationFundsWithdrawn represents a FundsWithdrawn event raised by the ChannelImplementation contract.
type ChannelImplementationFundsWithdrawn struct {
	Party       common.Address
	Beneficiary common.Address
	Amount      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterFundsWithdrawn is a free log retrieval operation binding the contract event 0xa92ff919b850e4909ab2261d907ef955f11bc1716733a6cbece38d163a69af8a.
//
// Solidity: event FundsWithdrawn(address indexed party, address indexed beneficiary, uint256 amount)
func (_ChannelImplementation *ChannelImplementationFilterer) FilterFundsWithdrawn(opts *bind.FilterOpts, party []common.Address, beneficiary []common.Address) (*ChannelImplementationFundsWithdrawnIterator, error) {

	var partyRule []interface{}
	for _, partyItem := range party {
		partyRule = append(partyRule, partyItem)
	}
	var beneficiaryRule []interface{}
	for _, beneficiaryItem := range beneficiary {
		beneficiaryRule = append(beneficiaryRule, beneficiaryItem)
	}

	logs, sub, err := _ChannelImplementation.contract.FilterLogs(opts, "FundsWithdrawn", partyRule, beneficiaryRule)
	if err != nil {
		return nil, err
	}
	return &ChannelImplementationFundsWithdrawnIterator{contract: _ChannelImplementation.contract, event: "FundsWithdrawn", logs: logs, sub: sub}, nil
}

// WatchFundsWithdrawn is a free log subscription operation binding the contract event 0xa92ff919b850e4909ab2261d907ef955f11bc1716733a6cbece38d163a69af8a.
//
// Solidity: event FundsWithdrawn(address indexed party, address indexed beneficiary, uint256 amount)
func (_ChannelImplementation *ChannelImplementationFilterer) WatchFundsWithdrawn(opts *bind.WatchOpts, sink chan<- *ChannelImplementationFundsWithdrawn, party []common.Address, beneficiary []common.Address) (event.Subscription, error) {

	var partyRule []interface{}
	for _, partyItem := range party {
		partyRule = append(partyRule, partyItem)
	}
	var beneficiaryRule []interface{}
	for _, beneficiaryItem := range beneficiary {
		beneficiaryRule = append(beneficiaryRule, beneficiaryItem)
	}

	logs, sub, err := _ChannelImplementation.contract.WatchLogs(opts, "FundsWithdrawn", partyRule, beneficiaryRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChannelImplementationFundsWithdrawn)
				if err := _ChannelImplementation.contract.UnpackLog(event, "FundsWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ChannelImplementationIdentityBalanceUpdatedIterator is returned from FilterIdentityBalanceUpdated and is used to iterate over the raw logs and unpacked data for IdentityBalanceUpdated events raised by the ChannelImplementation contract.
type ChannelImplementationIdentityBalanceUpdatedIterator struct {
	Event *ChannelImplementationIdentityBalanceUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChannelImplementationIdentityBalanceUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChannelImplementationIdentityBalanceUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChannelImplementationIdentityBalanceUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChannelImplementationIdentityBalanceUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChannelImplementationIdentityBalanceUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChannelImplementationIdentityBalanceUpdated represents a IdentityBalanceUpdated event raised by the ChannelImplementation contract.
type ChannelImplementationIdentityBalanceUpdated struct {
	Balance *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterIdentityBalanceUpdated is a free log retrieval operation binding the contract event 0x43bdc6fea91921a508e8dfbbf11f312c9ad4f98352d636364653f7f2dbc52ad2.
//
// Solidity: event IdentityBalanceUpdated(uint256 balance)
func (_ChannelImplementation *ChannelImplementationFilterer) FilterIdentityBalanceUpdated(opts *bind.FilterOpts) (*ChannelImplementationIdentityBalanceUpdatedIterator, error) {

	logs, sub, err := _ChannelImplementation.contract.FilterLogs(opts, "IdentityBalanceUpdated")
	if err != nil {
		return nil, err
	}
	return &ChannelImplementationIdentityBalanceUpdatedIterator{contract: _ChannelImplementation.contract, event: "IdentityBalanceUpdated", logs: logs, sub: sub}, nil
}

// WatchIdentityBalanceUpdated is a free log subscription operation binding the contract event 0x43bdc6fea91921a508e8dfbbf11f312c9ad4f98352d636364653f7f2dbc52ad2.
//
// Solidity: event IdentityBalanceUpdated(uint256 balance)
func (_ChannelImplementation *ChannelImplementationFilterer) WatchIdentityBalanceUpdated(opts *bind.WatchOpts, sink chan<- *ChannelImplementationIdentityBalanceUpdated) (event.Subscription, error) {

	logs, sub, err := _ChannelImplementation.contract.WatchLogs(opts, "IdentityBalanceUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChannelImplementationIdentityBalanceUpdated)
				if err := _ChannelImplementation.contract.UnpackLog(event, "IdentityBalanceUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ChannelImplementationOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ChannelImplementation contract.
type ChannelImplementationOwnershipTransferredIterator struct {
	Event *ChannelImplementationOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ChannelImplementationOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ChannelImplementationOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ChannelImplementationOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ChannelImplementationOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ChannelImplementationOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ChannelImplementationOwnershipTransferred represents a OwnershipTransferred event raised by the ChannelImplementation contract.
type ChannelImplementationOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ChannelImplementation *ChannelImplementationFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ChannelImplementationOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ChannelImplementation.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ChannelImplementationOwnershipTransferredIterator{contract: _ChannelImplementation.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ChannelImplementation *ChannelImplementationFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ChannelImplementationOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ChannelImplementation.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ChannelImplementationOwnershipTransferred)
				if err := _ChannelImplementation.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
